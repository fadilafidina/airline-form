{"ast":null,"code":"var _jsxFileName = \"/Users/fadilafidina/src/food/todolist/src/Body.js\";\nimport React, { Component } from 'react';\nimport todoData from './TodoData';\nimport { ToDoItem } from \"./ToDoItem\";\nexport class Body extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todoData: todoData,\n      isLoading: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        isLoading: false\n      });\n    }, 1500);\n  }\n\n  handleChange(idToMatch) {\n    this.setState(prevState => {\n      //make new array first\n      const updatedTodos = prevState.todoData.map(t => {\n        if (t.id === idToMatch) {\n          t.completed = !t.completed;\n        }\n\n        return t;\n      }); // then loop through everything and flip the sign that was completed.\n      // updatedTodos.forEach(element => {\n      //     if (element.id === idToMatch) {\n      //         element.completed = !element.completed;\n      //     }\n      // });\n      // set the new state to the new todos with the updated state\n\n      return {\n        todoData: updatedTodos\n      };\n    });\n    console.log(\"Changed\", idToMatch);\n  }\n\n  render() {\n    const todoComponents = this.state.todoData.map(todo => React.createElement(ToDoItem, {\n      id: todo.id,\n      text: todo.text,\n      completed: todo.completed,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"These are my to do\"), this.state.isLoading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \" Loading \") : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \" ok \"), todoComponents);\n  }\n\n}","map":{"version":3,"sources":["/Users/fadilafidina/src/food/todolist/src/Body.js"],"names":["React","Component","todoData","ToDoItem","Body","constructor","state","isLoading","handleChange","bind","componentDidMount","setTimeout","setState","idToMatch","prevState","updatedTodos","map","t","id","completed","console","log","render","todoComponents","todo","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAGA,OAAO,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAChCI,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTJ,MAAAA,QAAQ,EAAEA,QADD;AAETK,MAAAA,SAAS,EAAE;AAFF,KAAb;AAIA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,UAAU,CAAC,MAAM;AACb,WAAKC,QAAL,CAAc;AACVL,QAAAA,SAAS,EAAE;AADD,OAAd;AAGH,KAJS,EAIP,IAJO,CAAV;AAKH;;AAEDC,EAAAA,YAAY,CAACK,SAAD,EAAY;AACpB,SAAKD,QAAL,CAAcE,SAAS,IAAI;AACvB;AACA,YAAMC,YAAY,GAAGD,SAAS,CAACZ,QAAV,CAAmBc,GAAnB,CAAuBC,CAAC,IAAI;AAC7C,YAAGA,CAAC,CAACC,EAAF,KAASL,SAAZ,EAAuB;AACnBI,UAAAA,CAAC,CAACE,SAAF,GAAc,CAACF,CAAC,CAACE,SAAjB;AACH;;AACD,eAAOF,CAAP;AACH,OALoB,CAArB,CAFuB,CASvB;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,aAAO;AACHf,QAAAA,QAAQ,EAAEa;AADP,OAAP;AAGH,KApBD;AAqBAK,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,SAAvB;AACH;;AAEDS,EAAAA,MAAM,GAAG;AACL,UAAMC,cAAc,GAAG,KAAKjB,KAAL,CAAWJ,QAAX,CAAoBc,GAApB,CACnBQ,IAAI,IAAI,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAEA,IAAI,CAACN,EAAnB;AAAuB,MAAA,IAAI,EAAEM,IAAI,CAACC,IAAlC;AAAwC,MAAA,SAAS,EAAED,IAAI,CAACL,SAAxD;AAAmE,MAAA,QAAQ,EAAE,KAAKX,YAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAvB;AAGA,WAAQ;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJ;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADI,EAEH,KAAKF,KAAL,CAAWC,SAAX,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAvB,GAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFzC,EAIHgB,cAJG,CAAR;AAMH;;AArD+B","sourcesContent":["import React, { Component } from 'react';\nimport todoData from './TodoData';\nimport { ToDoItem } from \"./ToDoItem\";\n\n\nexport class Body extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todoData: todoData,\n            isLoading: true,\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                isLoading: false\n            })\n        }, 1500);\n    };\n\n    handleChange(idToMatch) {\n        this.setState(prevState => {\n            //make new array first\n            const updatedTodos = prevState.todoData.map(t => {\n                if(t.id === idToMatch) {\n                    t.completed = !t.completed;\n                }\n                return t;\n            });\n\n            // then loop through everything and flip the sign that was completed.\n            // updatedTodos.forEach(element => {\n            //     if (element.id === idToMatch) {\n            //         element.completed = !element.completed;\n            //     }\n            // });\n\n            // set the new state to the new todos with the updated state\n            return {\n                todoData: updatedTodos,\n            }\n        })\n        console.log(\"Changed\", idToMatch);\n    }\n\n    render() {\n        const todoComponents = this.state.todoData.map(\n            todo => <ToDoItem id={todo.id} text={todo.text} completed={todo.completed} onChange={this.handleChange} />);\n\n        return (<div className=\"content\">\n            <h2 className=\"heading\">These are my to do</h2>\n            {this.state.isLoading ? <h1> Loading </h1> : <h1> ok </h1>}\n\n            {todoComponents}\n        </div>);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}