{"ast":null,"code":"var _jsxFileName = \"/Users/fadilafidina/src/food/todolist/src/Body.js\";\nimport React, { Component } from 'react';\nimport todoData from './TodoData';\nimport { ToDoItem } from \"./ToDoItem\";\nexport class Body extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todoData: todoData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(idToMatch) {\n    this.setState(prevState => {\n      //make new array first\n      const updatedTodos = prevState.todoData.map(t => {\n        if (t.id === idToMatch) {\n          todo.completed = !todo.completed;\n        }\n      }); // then loop through everything and flip the sign that was completed.\n\n      updatedTodos.forEach(element => {\n        if (element.id === idToMatch) {\n          element.completed = !element.completed;\n        }\n      }); // set the new state to the new todos with the updated state\n\n      return {\n        todoData: updatedTodos\n      };\n    });\n    console.log(\"Changed\", idToMatch);\n  }\n\n  render() {\n    const todoComponents = this.state.todoData.map(todo => React.createElement(ToDoItem, {\n      id: todo.id,\n      text: todo.text,\n      completed: todo.completed,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"These are my to do\"), todoComponents);\n  }\n\n}","map":{"version":3,"sources":["/Users/fadilafidina/src/food/todolist/src/Body.js"],"names":["React","Component","todoData","ToDoItem","Body","constructor","state","handleChange","bind","idToMatch","setState","prevState","updatedTodos","map","t","id","todo","completed","forEach","element","console","log","render","todoComponents","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAGA,OAAO,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAChCI,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTJ,MAAAA,QAAQ,EAAEA;AADD,KAAb;AAGA,SAAKK,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDD,EAAAA,YAAY,CAACE,SAAD,EAAY;AACpB,SAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB;AACA,YAAMC,YAAY,GAAGD,SAAS,CAACT,QAAV,CAAmBW,GAAnB,CAAuBC,CAAC,IAAI;AAC7C,YAAGA,CAAC,CAACC,EAAF,KAASN,SAAZ,EAAuB;AACnBO,UAAAA,IAAI,CAACC,SAAL,GAAiB,CAACD,IAAI,CAACC,SAAvB;AACH;AACJ,OAJoB,CAArB,CAFuB,CAQvB;;AACAL,MAAAA,YAAY,CAACM,OAAb,CAAqBC,OAAO,IAAI;AAC5B,YAAIA,OAAO,CAACJ,EAAR,KAAeN,SAAnB,EAA8B;AAC1BU,UAAAA,OAAO,CAACF,SAAR,GAAoB,CAACE,OAAO,CAACF,SAA7B;AACH;AACJ,OAJD,EATuB,CAevB;;AACA,aAAO;AACHf,QAAAA,QAAQ,EAAEU;AADP,OAAP;AAGH,KAnBD;AAoBAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBZ,SAAvB;AACH;;AAEDa,EAAAA,MAAM,GAAG;AACL,UAAMC,cAAc,GAAG,KAAKjB,KAAL,CAAWJ,QAAX,CAAoBW,GAApB,CACnBG,IAAI,IAAI,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAEA,IAAI,CAACD,EAAnB;AAAuB,MAAA,IAAI,EAAEC,IAAI,CAACQ,IAAlC;AAAwC,MAAA,SAAS,EAAER,IAAI,CAACC,SAAxD;AAAmE,MAAA,QAAQ,EAAE,KAAKV,YAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAvB;AAGA,WAAQ;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJ;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADI,EAEHgB,cAFG,CAAR;AAIH;;AAzC+B","sourcesContent":["import React, { Component } from 'react';\nimport todoData from './TodoData';\nimport { ToDoItem } from \"./ToDoItem\";\n\n\nexport class Body extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todoData: todoData,\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(idToMatch) {\n        this.setState(prevState => {\n            //make new array first\n            const updatedTodos = prevState.todoData.map(t => {\n                if(t.id === idToMatch) {\n                    todo.completed = !todo.completed;\n                }\n            });\n\n            // then loop through everything and flip the sign that was completed.\n            updatedTodos.forEach(element => {\n                if (element.id === idToMatch) {\n                    element.completed = !element.completed;\n                }\n            });\n\n            // set the new state to the new todos with the updated state\n            return {\n                todoData: updatedTodos,\n            }\n        })\n        console.log(\"Changed\", idToMatch);\n    }\n\n    render() {\n        const todoComponents = this.state.todoData.map(\n            todo => <ToDoItem id={todo.id} text={todo.text} completed={todo.completed} onChange={this.handleChange} />);\n\n        return (<div className=\"content\">\n            <h2 className=\"heading\">These are my to do</h2>\n            {todoComponents}\n        </div>);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}