{"ast":null,"code":"var _jsxFileName = \"/Users/fadilafidina/src/food/todolist/src/Body.js\";\nimport React, { Component } from 'react';\nimport todoData from './TodoData';\nimport { ToDoItem } from \"./ToDoItem\";\nexport class Body extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todoData: todoData,\n      isLoading: true,\n      unreadMessages: [// \"Your mum\", \"Hello\"\n      ],\n      character: {},\n      requestLoading: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://swapi.co/api/people/1/\").then(response => response.json()).then(data => this.setState({\n      character: data,\n      requestLoading: true\n    }));\n  }\n\n  handleChange(idToMatch) {\n    this.setState(prevState => {\n      //make new array first\n      const updatedTodos = prevState.todoData.map(t => {\n        if (t.id === idToMatch) {\n          t.completed = !t.completed;\n        }\n\n        return t;\n      }); // set the new state to the new todos with the updated state\n\n      return {\n        todoData: updatedTodos\n      };\n    });\n    console.log(\"Changed\", idToMatch);\n  }\n\n  render() {\n    const todoComponents = this.state.todoData.map(todo => React.createElement(ToDoItem, {\n      id: todo.id,\n      text: todo.text,\n      completed: todo.completed,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"These are my to do\"), this.state.requestLoading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, `Name is ${this.state.character.name}`), this.state.isLoading ? React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \" Loading \") : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \" ok \"), this.state.unreadMessages.length > 0 ? React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"You have \", this.state.unreadMessages.length, \" unread messages\") : \"nothing!!!\", todoComponents);\n  }\n\n}","map":{"version":3,"sources":["/Users/fadilafidina/src/food/todolist/src/Body.js"],"names":["React","Component","todoData","ToDoItem","Body","constructor","state","isLoading","unreadMessages","character","requestLoading","handleChange","bind","componentDidMount","fetch","then","response","json","data","setState","idToMatch","prevState","updatedTodos","map","t","id","completed","console","log","render","todoComponents","todo","text","name","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAGA,OAAO,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAChCI,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTJ,MAAAA,QAAQ,EAAEA,QADD;AAETK,MAAAA,SAAS,EAAE,IAFF;AAGTC,MAAAA,cAAc,EAAE,CACZ;AADY,OAHP;AAMTC,MAAAA,SAAS,EAAE,EANF;AAOTC,MAAAA,cAAc,EAAE;AAPP,KAAb;AASA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,gCAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI,KAAKC,QAAL,CAAc;AACxBV,MAAAA,SAAS,EAAES,IADa;AAExBR,MAAAA,cAAc,EAAE;AAFQ,KAAd,CAFd;AAMH;;AAEDC,EAAAA,YAAY,CAACS,SAAD,EAAY;AACpB,SAAKD,QAAL,CAAcE,SAAS,IAAI;AACvB;AACA,YAAMC,YAAY,GAAGD,SAAS,CAACnB,QAAV,CAAmBqB,GAAnB,CAAuBC,CAAC,IAAI;AAC7C,YAAGA,CAAC,CAACC,EAAF,KAASL,SAAZ,EAAuB;AACnBI,UAAAA,CAAC,CAACE,SAAF,GAAc,CAACF,CAAC,CAACE,SAAjB;AACH;;AACD,eAAOF,CAAP;AACH,OALoB,CAArB,CAFuB,CASvB;;AACA,aAAO;AACHtB,QAAAA,QAAQ,EAAEoB;AADP,OAAP;AAGH,KAbD;AAcAK,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,SAAvB;AACH;;AAEDS,EAAAA,MAAM,GAAG;AACL,UAAMC,cAAc,GAAG,KAAKxB,KAAL,CAAWJ,QAAX,CAAoBqB,GAApB,CACnBQ,IAAI,IAAI,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAEA,IAAI,CAACN,EAAnB;AAAuB,MAAA,IAAI,EAAEM,IAAI,CAACC,IAAlC;AAAwC,MAAA,SAAS,EAAED,IAAI,CAACL,SAAxD;AAAmE,MAAA,QAAQ,EAAE,KAAKf,YAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAvB;AAGA,WAAQ;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJ;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADI,EAGH,KAAKL,KAAL,CAAWI,cAAX,GAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA5B,GAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,WAAU,KAAKJ,KAAL,CAAWG,SAAX,CAAqBwB,IAAK,EAAzC,CAH1C,EAMH,KAAK3B,KAAL,CAAWC,SAAX,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAvB,GAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANzC,EAOH,KAAKD,KAAL,CAAWE,cAAX,CAA0B0B,MAA1B,GAAmC,CAAnC,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc,KAAK5B,KAAL,CAAWE,cAAX,CAA0B0B,MAAxC,qBADD,GAEC,YATE,EAWHJ,cAXG,CAAR;AAaH;;AA3D+B","sourcesContent":["import React, { Component } from 'react';\nimport todoData from './TodoData';\nimport { ToDoItem } from \"./ToDoItem\";\n\n\nexport class Body extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todoData: todoData,\n            isLoading: true,\n            unreadMessages: [\n                // \"Your mum\", \"Hello\"\n            ],\n            character: {},\n            requestLoading: true\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(\"https://swapi.co/api/people/1/\")\n        .then(response => response.json())\n        .then(data => this.setState({\n            character: data,\n            requestLoading: true,\n        }));\n    };\n\n    handleChange(idToMatch) {\n        this.setState(prevState => {\n            //make new array first\n            const updatedTodos = prevState.todoData.map(t => {\n                if(t.id === idToMatch) {\n                    t.completed = !t.completed;\n                }\n                return t;\n            });\n\n            // set the new state to the new todos with the updated state\n            return {\n                todoData: updatedTodos,\n            }\n        })\n        console.log(\"Changed\", idToMatch);\n    }\n\n    render() {\n        const todoComponents = this.state.todoData.map(\n            todo => <ToDoItem id={todo.id} text={todo.text} completed={todo.completed} onChange={this.handleChange} />);\n\n        return (<div className=\"content\">\n            <h2 className=\"heading\">These are my to do</h2>\n\n            {this.state.requestLoading ? <p>Loading</p> : <p>{`Name is ${this.state.character.name}`}</p>}\n        \n\n            {this.state.isLoading ? <h2> Loading </h2> : <h2> ok </h2>}\n            {this.state.unreadMessages.length > 0\n            ? <h2>You have {this.state.unreadMessages.length} unread messages</h2>\n            : \"nothing!!!\"}\n\n            {todoComponents}\n        </div>);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}